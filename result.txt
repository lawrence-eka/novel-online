starting deployd v0.8.9...
max socket is  Infinity
NODE_ENV=production
DPD_ENV=development
Serving for the following systems:
    0 { basePath: '../esnaadm', public: '/public' }
    1 { basePath: '../esnaadm-copy', public: '/public' }
Http to Https Forwarder is listening on port 80
Server is listening on port 443
type help for a list of commands
dpd > { type: 'all' } Context {
  url: '/',
  req: 
   IncomingMessage {
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: null,
        ended: true,
        endEmitted: false,
        reading: false,
        sync: true,
        needReadable: false,
        emittedReadable: true,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: true,
        decoder: null,
        encoding: null },
     readable: true,
     domain: 
      Domain {
        domain: null,
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        members: [Array] },
     _events: {},
     _eventsCount: 0,
     _maxListeners: undefined,
     socket: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Object],
        _idleStart: 3701,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 247,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 248,
        [Symbol(triggerId)]: 229 },
     connection: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Object],
        _idleStart: 3701,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 247,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 248,
        [Symbol(triggerId)]: 229 },
     httpVersionMajor: 1,
     httpVersionMinor: 1,
     httpVersion: '1.1',
     complete: true,
     headers: 
      { host: 'localhost',
        connection: 'keep-alive',
        accept: 'application/json',
        'user-agent': 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36',
        referer: 'https://localhost/',
        'accept-encoding': 'gzip, deflate, sdch, br',
        'accept-language': 'en-US,en;q=0.8',
        cookie: 'Webstorm-9df4e8b7=67abc8e3-e4bf-4fe8-b571-b65ab6b62038; io=REAxHM2DibYAqFEoAAAI; sid=6f74fe55c2aace59f8bd0533728355a1e93a6f09f9e9d059e8180210f64548e1e2a2bd3e7fd7ce7c28c8dcfd44245deed68b1cf37a97685ca6bed2a0c116512e' },
     rawHeaders: 
      [ 'Host',
        'localhost',
        'Connection',
        'keep-alive',
        'Accept',
        'application/json',
        'User-Agent',
        'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36',
        'Referer',
        'https://localhost/',
        'Accept-Encoding',
        'gzip, deflate, sdch, br',
        'Accept-Language',
        'en-US,en;q=0.8',
        'Cookie',
        'Webstorm-9df4e8b7=67abc8e3-e4bf-4fe8-b571-b65ab6b62038; io=REAxHM2DibYAqFEoAAAI; sid=6f74fe55c2aace59f8bd0533728355a1e93a6f09f9e9d059e8180210f64548e1e2a2bd3e7fd7ce7c28c8dcfd44245deed68b1cf37a97685ca6bed2a0c116512e' ],
     trailers: {},
     rawTrailers: [],
     upgrade: false,
     url: '/processbook?type=all',
     method: 'GET',
     statusCode: null,
     statusMessage: null,
     client: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Object],
        _idleStart: 3701,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object],
        [Symbol(asyncId)]: 247,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 248,
        [Symbol(triggerId)]: 229 },
     _consuming: false,
     _dumped: false,
     cookies: Cookies { secure: undefined, request: [Circular], response: [Object] },
     query: { type: 'all' },
     session: 
      Session {
        data: [Object],
        sid: '6f74fe55c2aace59f8bd0533728355a1e93a6f09f9e9d059e8180210f64548e1e2a2bd3e7fd7ce7c28c8dcfd44245deed68b1cf37a97685ca6bed2a0c116512e',
        store: [Object],
        socket: [Object],
        emitToUsers: [Function],
        emitToAll: [Function],
        emitToRoom: [Function],
        joinRooms: [Function],
        joinRoom: [Function],
        leaveRooms: [Function],
        leaveRoom: [Function],
        _leaveAllRooms: [Function],
        leaveAllRooms: [Function],
        user: [Object],
        isRoot: false },
     _routed: true },
  res: 
   ServerResponse {
     domain: 
      Domain {
        domain: null,
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        members: [Array] },
     _events: { finish: [Function: bound resOnFinish] },
     _eventsCount: 1,
     _maxListeners: undefined,
     output: [],
     outputEncodings: [],
     outputCallbacks: [],
     outputSize: 0,
     writable: true,
     _last: false,
     upgrading: false,
     chunkedEncoding: false,
     shouldKeepAlive: true,
     useChunkedEncodingByDefault: true,
     sendDate: true,
     _removedConnection: false,
     _removedContLen: false,
     _removedTE: false,
     _contentLength: null,
     _hasBody: true,
     _trailer: '',
     finished: false,
     _headerSent: false,
     socket: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Object],
        _idleStart: 3701,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Circular],
        [Symbol(asyncId)]: 247,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 248,
        [Symbol(triggerId)]: 229 },
     connection: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: [Function],
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: true,
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Object],
        _idleStart: 3701,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Circular],
        [Symbol(asyncId)]: 247,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 248,
        [Symbol(triggerId)]: 229 },
     _header: null,
     _onPendingData: [Function: bound updateOutgoingData],
     _sent100: false,
     _expect_continue: false,
     cookies: Cookies { secure: undefined, request: [Object], response: [Circular] },
     [Symbol(outHeadersKey)]: { 'set-cookie': [Array] } },
  body: undefined,
  query: { type: 'all' },
  server: 
   Server {
     _contexts: [],
     requestCert: false,
     rejectUnauthorized: true,
     key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
     cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
     honorCipherOrder: true,
     NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
     ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
     sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
     _sharedCreds: 
      SecureContext {
        context: SecureContext {},
        alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
     domain: null,
     _events: 
      { connection: [Function],
        secureConnection: [Function: connectionListener],
        tlsClientError: [Function: addListener],
        close: [Function: bound ],
        upgrade: [Function],
        request: [Array],
        'request:error': [Function],
        listening: [Function: onListening],
        error: [Function: onError] },
     _eventsCount: 9,
     _maxListeners: undefined,
     _connections: 1,
     _handle: 
      TCP {
        bytesRead: 0,
        _externalStream: [External],
        fd: -1,
        reading: false,
        owner: [Circular],
        onread: null,
        onconnection: [Function: onconnection],
        writeQueueSize: 0 },
     _usingSlaves: false,
     _slaves: [],
     _unref: false,
     allowHalfOpen: false,
     pauseOnConnect: false,
     httpAllowHalfOpen: false,
     timeout: 120000,
     keepAliveTimeout: 5000,
     options: 
      { port: 443,
        env: 'development',
        db: [Object],
        SNICallback: [Function],
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        dirs: [Object],
        NPNProtocols: [Array],
        ALPNProtocols: [Array] },
     stores: 
      { bookfilesfileupload: [Object],
        thumbfilesfileupload: [Object] },
     db: 
      Db {
        options: [Object],
        connectionString: 'mongodb://127.0.0.1:6822/-deployd',
        connectionOptions: null,
        Db: [Object] },
     sockets: 
      Namespace {
        name: '/',
        server: [Object],
        sockets: {},
        connected: {},
        fns: [],
        ids: 0,
        adapter: [Object],
        _events: [Object],
        _eventsCount: 1 },
     sessions: 
      SessionStore {
        id: 'fee44bfa8666019d1e93754be22ee25261c631848967c2503bef9b5a788d91220149136fd7ad5608bebe3a9293951074f02c41a35e23d1904d4a592fb10949af',
        sockets: [Object],
        options: [Object],
        socketQueue: [Object],
        socketIndex: {},
        namespace: 'sessions',
        _db: [Object] },
     keys: Keys { path: '.dpd/keys.json' },
     emit: [Function],
     resources: 
      [ [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object] ],
     router: Router { resources: [Array], server: [Circular] },
     _connectionKey: '6::::443',
     [Symbol(asyncId)]: 229 },
  session: 
   Session {
     data: 
      { createdOn: 1510026820235,
        lastActive: 1510028516499,
        path: '/users',
        uid: '36d83f1119ee6a27',
        userhash: '517e546ae3c59e5a16a3eed502f97036',
        id: '6f74fe55c2aace59f8bd0533728355a1e93a6f09f9e9d059e8180210f64548e1e2a2bd3e7fd7ce7c28c8dcfd44245deed68b1cf37a97685ca6bed2a0c116512e' },
     sid: '6f74fe55c2aace59f8bd0533728355a1e93a6f09f9e9d059e8180210f64548e1e2a2bd3e7fd7ce7c28c8dcfd44245deed68b1cf37a97685ca6bed2a0c116512e',
     store: 
      SessionStore {
        id: 'fee44bfa8666019d1e93754be22ee25261c631848967c2503bef9b5a788d91220149136fd7ad5608bebe3a9293951074f02c41a35e23d1904d4a592fb10949af',
        sockets: [Object],
        options: [Object],
        socketQueue: [Object],
        socketIndex: {},
        namespace: 'sessions',
        _db: [Object] },
     socket: 
      { _bindQueue: [Array],
        on: [Function],
        emit: [Function],
        join: [Function],
        leave: [Function] },
     emitToUsers: [Function],
     emitToAll: [Function],
     emitToRoom: [Function],
     joinRooms: [Function],
     joinRoom: [Function],
     leaveRooms: [Function],
     leaveRoom: [Function],
     _leaveAllRooms: [Function],
     leaveAllRooms: [Function],
     user: 
      { email: 'kamu@aja',
        firstName: 'kamu',
        lastName: 'aja',
        booksId: null,
        username: 'kamu@aja',
        isPublisher: false,
        isAdmin: false,
        isMember: true,
        birthYear: 2000,
        id: '36d83f1119ee6a27' },
     isRoot: false },
  method: 'GET',
  done: [Function],
  dpd: 
   { bookfiles: 
      { get: [Function: get],
        post: [Function: post],
        put: [Function: put],
        del: [Function: del],
        exec: [Function],
        getResource: [Function] },
     books: 
      { get: [Function: get],
        post: [Function: post],
        put: [Function: put],
        del: [Function: del],
        exec: [Function],
        getResource: [Function] },
     genres: 
      { get: [Function: get],
        post: [Function: post],
        put: [Function: put],
        del: [Function: del],
        exec: [Function],
        getResource: [Function] },
     processbook: 
      { get: [Function: get],
        post: [Function: post],
        put: [Function: put],
        del: [Function: del],
        exec: [Function],
        getResource: [Function] },
     reviews: 
      { get: [Function: get],
        post: [Function: post],
        put: [Function: put],
        del: [Function: del],
        exec: [Function],
        getResource: [Function] },
     thumbfiles: 
      { get: [Function: get],
        post: [Function: post],
        put: [Function: put],
        del: [Function: del],
        exec: [Function],
        getResource: [Function] },
     users: 
      { get: [Function: get],
        post: [Function: post],
        put: [Function: put],
        del: [Function: del],
        exec: [Function],
        me: [Function],
        login: [Function],
        logout: [Function],
        getResource: [Function] } },
  router: 
   Router {
     resources: 
      [ [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object] ],
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 4d 49 49 45 76 77 49 42 41 44 41 4e 42 67 6b 71 68 6b 69 47 39 ... >,
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 46 44 6a 43 43 41 2f 61 67 41 77 49 42 41 67 49 53 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'aef38a8998b03add3e0d0e44d6425020',
        _sharedCreds: [Object],
        domain: null,
        _events: [Object],
        _eventsCount: 9,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        options: [Object],
        stores: [Object],
        db: [Object],
        sockets: [Object],
        sessions: [Object],
        keys: [Object],
        emit: [Function],
        resources: [Array],
        router: [Circular],
        _connectionKey: '6::::443',
        [Symbol(asyncId)]: 229 } } }
Terminate batch job (Y/N)? 
